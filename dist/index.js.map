{"version":3,"sources":["../src/node/cli.ts","../src/node/server/index.ts","../src/node/optimizer/index.ts","../src/node/constants.ts","../src/node/optimizer/scanPlugin.ts","../src/node/optimizer/preBundlePlugin.ts","../src/node/utils.ts","../src/node/plugins/esbuild.ts","../src/node/plugins/resolve.ts","../src/node/plugins/importAnalysis.ts","../src/node/plugins/css.ts","../src/node/plugins/assets.ts","../src/node/plugins/index.ts","../src/node/pluginContainer.ts","../src/node/server/middlewares/indexHtml.ts","../src/node/server/middlewares/transform.ts","../src/node/server/middlewares/static.ts","../src/node/ModuleGraph.ts","../src/node/ws.ts"],"sourcesContent":["//命令行工具\nimport cac from 'cac';\nimport { startDevServer } from './server';\n\nconst cli = cac();\n\ncli\n  .command('[root]', 'Run the development server')\n  .alias('serve')\n  .alias('dev')\n  .action(async () => {\n    await startDevServer();\n    // console.log('ceshi');\n  });\n\ncli.help();\n\ncli.parse();\n","import connect from \"connect\";\nimport { blue, green } from \"picocolors\";\nimport { optimize } from \"../optimizer/index\";\nimport { resolvePlugins } from \"../plugins/index\";\nimport { PluginContainer, createPluginContainer } from \"../pluginContainer\";\nimport { Plugin } from \"../plugin\";\nimport { indexHtmlMiddleware } from \"./middlewares/indexHtml\";\nimport { transformMiddleware } from \"./middlewares/transform\";\nimport { staticMiddleware } from \"./middlewares/static\";\nimport { normalizePath } from \"../utils\";\nimport { ModuleGraph } from \"../ModuleGraph\";\nimport chokidar,{FSWatcher} from 'chokidar'\nimport { createWebSocketServer } from '../ws';\n\nexport interface ServerContext {\n  root: string;\n  pluginContainer: PluginContainer;\n  app: connect.Server;\n  plugins: Plugin[];\n  moduleGraph:ModuleGraph;\n  ws:{send:(data:any)=>void;close:()=>void};\n  watcher:FSWatcher\n}\n\nexport async function startDevServer() {\n  const app = connect();\n  const root = process.cwd();\n  \n  const startTime = Date.now();\n  const plugins = resolvePlugins();\n  //创建文件监听器\n  const watcher=chokidar.watch(root,{\n    ignored:[\"**/node_modules/**\",\"**/.git/**\"],\n    ignoreInitial:true\n  })\n  //创建插件容器\n  const moduleGraph=new ModuleGraph((url)=>pluginContainer.resolveId(url))\n  const pluginContainer = createPluginContainer(plugins);\n\n  //WebSocket对象\n  const ws=createWebSocketServer(app)\n\n  //创建configureServer所需的server实例\n  const serverContext: ServerContext = {\n    root: normalizePath(process.cwd()),\n    app,\n    pluginContainer,\n    plugins,\n    moduleGraph,\n    ws,\n    watcher\n  };\n\n  for (const plugin of plugins) {\n    if (plugin.configureServer) {\n      //vite的configureServer中间件，用来拓展vite的devServer\n      //用来增加自定义中间件\n      await plugin.configureServer(serverContext);\n    }\n  }\n  \n  app.use(transformMiddleware(serverContext));\n  //处理html资源的中间件\n  app.use(indexHtmlMiddleware(serverContext));\n  app.use(staticMiddleware(serverContext.root));\n\n  app.listen(3000, async () => {\n    //等待依赖预构建\n    await optimize(root);\n    console.log(green(\"🚀 xp的No-Bundle服务已经启动啦!\"), `耗时：${Date.now() - startTime}ms`);\n    console.log(`>本地访问路径：${blue(\"http://localhost:3000\")}`);\n  });\n}\n","import path from \"path\";\nimport { build } from \"esbuild\";\nimport { green, red } from \"picocolors\";\nimport { scanPlugin } from \"./scanPlugin\";\nimport { PRE_BUNDLE_DIR } from \"../constants\";\nimport { preBundlePlugin } from \"./preBundlePlugin\";\n\nexport async function optimize(root: string) {\n  //确定入口\n  const entry = path.resolve(root, \"src/main.tsx\");\n\n  //从入口处扫描依赖\n  const deps = new Set<string>();\n  await build({\n    entryPoints: [entry],\n    bundle: true,\n    write: false,\n    plugins: [scanPlugin(deps)],\n  });\n  console.log(\n    `${green(\"需要预构建的依赖\")}:\\n${[...deps]\n      .map(red)\n      .map((item) => `  ${item}`)\n      .join(\"\\n\")}`\n  );\n\n  // 依赖预构建\n  await build({\n    entryPoints: [...deps],\n    write: true,\n    bundle: true,\n    format: \"esm\",\n    splitting: true,\n    outdir: path.resolve(root, PRE_BUNDLE_DIR),\n    plugins: [preBundlePlugin(deps)],\n  });\n}\n","//定义的常量\n\nimport path from \"path\";\n\nexport const EXTERNAL_TYPES = [\n  \"css\",\n  \"less\",\n  \"sass\",\n  \"scss\",\n  \"styl\",\n  \"stylus\",\n  \"pcss\",\n  \"postcss\",\n  \"vue\",\n  \"svelte\",\n  \"marko\",\n  \"astro\",\n  \"png\",\n  \"jpe?g\",\n  \"gif\",\n  \"svg\",\n  \"ico\",\n  \"webp\",\n  \"avif\",\n];\n\n//bare import 路径\nexport const BARE_IMPORT_RE = /^[\\w@][^:]/;\n\n//预构建产物默认存放在 node_modules 中的 .m-vite 目录中\nexport const PRE_BUNDLE_DIR = path.join(\"node_modules\", \".m-vite\");\n\n//js的文件类型\nexport const JS_TYPES_RE = /\\.(?:j|t)sx?$|\\.mjs$/;\nexport const QUERY_RE = /\\?.*$/s;\nexport const HASH_RE = /#.*$/s;\n\nexport const DEFAULT_EXTENSIONS = [\".tsx\", \".ts\", \".jsx\", \"js\"];\n\n//websocket地址\nexport const HMR_PORT = 24678;\n","//依赖扫描的插件\nimport { Plugin } from 'esbuild';\nimport { BARE_IMPORT_RE, EXTERNAL_TYPES } from '../constants';\n\n//对于 bare import进行依赖预构建\nexport function scanPlugin(deps: Set<string>): Plugin {\n  return {\n    name: 'esbuild:scan-deps',\n    setup(build) {\n      //忽略的文件类型\n      build.onResolve(\n        { filter: new RegExp(`\\\\.(${EXTERNAL_TYPES.join('|')})$`) },\n        (resolveInfo) => {\n          return {\n            path: resolveInfo.path,\n            //打上标记区分\n            external: true\n          };\n        }\n      );\n      //记录依赖\n      build.onResolve(\n        {\n          filter: BARE_IMPORT_RE\n        },\n        (resolveInfo) => {\n          const { path: id } = resolveInfo;\n          //在这里收集到了依赖\n          deps.add(id);\n          return {\n            path: id,\n            external: true\n          };\n        }\n      );\n    }\n  };\n}\n","//依赖构建的插件\n\nimport { Plugin, Loader } from 'esbuild';\nimport { BARE_IMPORT_RE } from '../constants';\n// 用来分析es模块的 import/export 语句的库\nimport { init, parse } from 'es-module-lexer';\nimport path from 'path';\n//一个实现了node路径解析算法的库\nimport resolve from 'resolve';\n// 一个更加好用的文件操作库\nimport fs from 'fs-extra';\n//用来开发打印 debug 日志的库\nimport createDebug from 'debug';\nimport { normalizePath } from '../utils';\nimport { ExportSpecifier } from 'es-module-lexer';\n\nconst debug = createDebug('dev');\n\nexport function preBundlePlugin(deps: Set<string>): Plugin {\n  return {\n    name: 'esbuild:pre-bundle',\n    setup(build) {\n      build.onResolve(\n        {\n          filter: BARE_IMPORT_RE\n        },\n        (resolveInfo) => {\n          const { path: id, importer } = resolveInfo;\n          const isEntry = !importer;\n          //命中需要预构建的依赖\n          if (deps.has(id)) {\n            //如果为入口，则标记dep的namespace\n            return isEntry\n              ? {\n                  path: id,\n                  namespace: 'dep'\n                }\n              : {\n                  //因为走到 onResolve 了，所以这里的path 就是绝对路径了\n                  path: resolve.sync(id, { basedir: process.cwd() })\n                };\n          }\n        }\n      );\n      //拿到标记后的模块，构造代理模块，交给esbuild打包\n      build.onLoad(\n        {\n          filter: /.*/,\n          namespace: 'dep'\n        },\n        async (loadInfo) => {\n          //es-module-lexer的init初始化\n          await init;\n          const id = loadInfo.path;\n          const root = process.cwd();\n          //获得路径\n          const entryPath = normalizePath(resolve.sync(id, { basedir: root }));\n          // 读取文件内容\n          const code = await fs.readFile(entryPath, 'utf-8');\n          //es模块的解析，cjs解析不到\n          const [imports, exports] = await parse(code);\n          const proxyModule = [];\n\n          let relativePath = normalizePath(path.relative(root, entryPath));\n          if (\n            !relativePath.startsWith('./') &&\n            !relativePath.startsWith('../') &&\n            relativePath !== '.'\n          ) {\n            relativePath = `./${relativePath}`;\n          }\n\n          //cjs\n          // 所以这里为空代表cjs模块\n          if (!imports.length && !exports.length) {\n            //构造代理模块\n            const res = require(entryPath);\n            const specifiers = Object.keys(res);\n            // console.log('res',res);\n\n            // console.log(\"specifiers------->\", specifiers);\n\n            proxyModule.push(\n              `export { ${specifiers.join(',')} } from \"${relativePath}\"`,\n              `export default require(\"${relativePath}\")`\n\n              // `export {${specifiers.join(\",\")} } from \"${entryPath}\"`,\n              // `export default require(\"${entryPath})`\n            );\n          } else {\n            //esm格式的处理\n            if (exports.includes('default' as any as ExportSpecifier)) {\n              proxyModule.push(\n                `import d from \"${relativePath}\";export default d`\n              );\n              // proxyModule.push(`import d from \"${entryPath}\";export default d`);\n            }\n            proxyModule.push(`export * from \"${relativePath}\"`);\n            // proxyModule.push(`export * from \"${entryPath}\"`);\n          }\n          debug('代理模块内容：%o', proxyModule.join('\\n'));\n          const loader = path.extname(entryPath).slice(1);\n          return {\n            loader: loader as Loader,\n            contents: proxyModule.join('\\n'),\n            resolveDir: root\n          };\n        }\n      );\n    }\n  };\n}\n","// 兼容windows系统\n\nimport os from \"os\";\nimport path from \"path\";\nimport { JS_TYPES_RE, HASH_RE, QUERY_RE } from \"./constants\";\n\n//对window电脑进行适配\nexport function slash(p: string): string {\n  return p.replace(/\\\\/g, \"/\");\n}\n\n//判断是否是window电脑\nexport const isWindows = os.platform() === \"win32\";\n\n//对路径进行window适配\nexport function normalizePath(id: string): string {\n  return path.posix.normalize(isWindows ? slash(id) : id);\n}\n\n//顾名思义，清理url，去除hash等信息\nexport const cleanUrl = (url: string): string => url.replace(HASH_RE, \"\").replace(QUERY_RE, \"\");\n\n//\nexport const isJsRequest = (id: string): boolean => {\n  id = cleanUrl(id);\n  if (JS_TYPES_RE.test(id)) {\n    return true;\n  }\n  if (!path.extname(id) && id.endsWith(\"/\")) {\n    return true;\n  }\n  return false;\n};\n\nexport const isCssRequest = (id: string): boolean => cleanUrl(id).endsWith(\".css\");\n\n//静态资源请求\nexport function isImportRequest(url: string): boolean {\n  return url.endsWith(\"?import\");\n}\n\n//应该是返回相对路径\nexport function getShortName(file: string, root: string) {\n  return file.startsWith(root + \"/\") ? path.posix.relative(root, file) : file;\n}\n\n//去除后面添加的import\nexport function removeImportQuery(url: string): string {\n  return url.replace(/\\?import$/, \"\");\n}\n\n","//将js，tsx等编译成可识别的js语法\nimport { readFile } from 'fs-extra';\nimport { Plugin } from '../plugin';\nimport { isJsRequest } from '../utils';\nimport esbuild from 'esbuild';\nimport path from 'path';\n\nexport function esbuildTransformPlugin(): Plugin {\n  return {\n    name: 'm-vite:esbuild-transform',\n    async load(id) {\n      if (isJsRequest(id)) {\n        try {\n          const code = await readFile(id, 'utf-8');\n          return code;\n        } catch (e) {\n          return null;\n        }\n      }\n    },\n    async transform(code, id) {\n      if (isJsRequest(id)) {\n        const extname = path.extname(id).slice(1);\n        const { code: transformedCode, map } = await esbuild.transform(code, {\n          target: 'esnext',\n          format: 'esm',\n          sourcemap: true,\n          loader: extname as 'js' | 'ts' | 'jsx' | 'tsx'\n        });\n        return {\n          code: transformedCode,\n          map\n        };\n      }\n      return null;\n    }\n  };\n}\n","//路径解析插件，对请求路径进行解析\nimport resolve from 'resolve';\nimport { Plugin } from '../plugin';\nimport { ServerContext } from '../server';\nimport path from 'path';\nimport { pathExists } from 'fs-extra';\nimport { DEFAULT_EXTENSIONS } from '../constants';\nimport { cleanUrl, normalizePath } from '../utils';\n\nexport function resolvePlugin(): Plugin {\n  let serverContext: ServerContext;\n  return {\n    name: 'm-vite:resolve',\n    configureServer(s) {\n      // 保存服务端上下文\n      serverContext = s;\n    },\n    async resolveId(id: string, importer?: string) {\n      //绝对路径\n      if (path.isAbsolute(id)) {\n        if (await pathExists(id)) {\n          return { id };\n        }\n        //处理绝对路径中 ‘/src/main.tsx 的情况\n        id = path.join(serverContext.root, id);\n        if (await pathExists(id)) {\n          return { id };\n        }\n      }\n      //相对路径的情况\n      else if (id.startsWith('.')) {\n        if (!importer) {\n          throw new Error('\"importer\" should not be undefined');\n        }\n        // console.log('importer------->',importer);\n\n        const hasExtension = path.extname(id).length > 1;\n        let resolveId: string;\n        //包含文件名后缀\n        //如 ./App.tsx\n        if (hasExtension) {\n          resolveId = normalizePath(\n            resolve.sync(id, { basedir: path.dirname(importer) })\n          );\n          // console.log('resolve,ts-------->',resolveId);\n\n          if (await pathExists(resolveId)) {\n            // return {id:resolveId}\n            return { id };\n          }\n        }\n        //不包含文件名后缀\n        else {\n          for (const extname of DEFAULT_EXTENSIONS) {\n            try {\n              const withExtension = `${id}${extname}`;\n              resolveId = normalizePath(\n                resolve.sync(withExtension, {\n                  basedir: path.dirname(importer)\n                })\n              );\n              // console.log(resolveId);\n\n              if (await pathExists(resolveId)) {\n                return { id: withExtension };\n              }\n            } catch (e) {\n              continue;\n            }\n          }\n        }\n      }\n      return null;\n    }\n  };\n}\n","//解决文件中第三方依赖路径，重写预构建产物，改变路径\n//import分析插件\nimport { init, parse } from \"es-module-lexer\";\nimport { BARE_IMPORT_RE, DEFAULT_EXTENSIONS, PRE_BUNDLE_DIR } from \"../constants\";\nimport { cleanUrl, isJsRequest, normalizePath } from \"../utils\";\nimport MagicString from \"magic-string\";\nimport path from \"path\";\nimport { Plugin } from \"../plugin\";\nimport { ServerContext } from \"../server\";\nimport { pathExists } from \"fs-extra\";\nimport resolve from \"resolve\";\nimport type { PluginContext } from \"rollup\";\n\nexport function importAnalysisPlugin(): Plugin {\n  let serverContext: ServerContext;\n  return {\n    name: \"m-vite:import-analysis\",\n    configureServer(s) {\n      //保存上下文\n      serverContext = s;\n    },\n    async transform(this: PluginContext, code: string, id: string) {\n      //只处理js相关的请求\n      if (!isJsRequest(id)) {\n        return null;\n      }\n      await init;\n      //解析import语句\n      const [imports] = parse(code);\n      const ms = new MagicString(code);\n      const {moduleGraph}=serverContext\n      const curMod=moduleGraph.getModuleById(id)!\n      const importedModules=new Set<string>()\n      //对每一个import语句进行分析\n      for (const importInfo of imports) {\n        const { s: modStart, e: modEnd, n: modeSource } = importInfo;\n        if (!modeSource) continue;\n        //静态资源\n        if (modeSource.endsWith(\".svg\")) {\n          //加上一个？import后缀\n          let resolveUrl = path.join(path.dirname(id), modeSource);\n          const a = resolveUrl.split(\"\\\\\");\n          resolveUrl = a.join(\"/\");\n          resolveUrl = resolveUrl.slice(2);\n          ms.overwrite(modStart, modEnd, `${resolveUrl}?import`);\n          continue;\n        }\n        if (BARE_IMPORT_RE.test(modeSource)) {\n          //第三方库，路径重写到预构建的路径\n          const bundlePath = normalizePath(path.join(\"/\", PRE_BUNDLE_DIR, `${modeSource}.js`));\n          ms.overwrite(modStart, modEnd, bundlePath);\n          importedModules.add(bundlePath)\n        } else if (modeSource.startsWith(\".\") || modeSource.startsWith(\"/\")) {\n          //直接调用上下文的resolve方法，会经过路劲解析插件的处理\n          const resolved = await this.resolve(modeSource, id);\n          if (resolved) {\n            ms.overwrite(modStart, modEnd, resolved.id);\n            importedModules.add(resolved as any as string)\n          }\n        }\n      }\n      moduleGraph.updateModuleInfo(curMod,importedModules)\n      return {\n        code: ms.toString(),\n        map: ms.generateMap(),\n      };\n    },\n  };\n}\n","import { readFile } from \"fs-extra\";\nimport { Plugin } from \"../plugin\";\n\nexport function cssPlugin(): Plugin {\n  return {\n    name: \"m-vite:css\",\n    load(id) {\n      //加载\n      if (id.endsWith(\".css\")) {\n        return readFile(id, \"utf-8\");\n      }\n    },\n    //转换逻辑\n    async transform(code, id) {\n      if (id.endsWith(\".css\")) {\n        //包装成js模块\n        const jsContent = `\nconst css=\" ${code.replace(/\\n/g, \"\")} \";\nconst style=document.createElement(\"style\");\nstyle.setAttribute(\"type\",\"text/css\");\nstyle.innerHTML=css;\ndocument.head.appendChild(style);\nexport default css;\n`.trim();\n        return {\n          code: jsContent,\n        };\n      }\n      return null;\n    },\n  };\n}\n","import { pathExists, readFile } from \"fs-extra\";\r\nimport { Plugin } from \"../plugin\";\r\nimport { ServerContext } from \"../server\";\r\nimport { cleanUrl, normalizePath, getShortName, removeImportQuery } from \"../utils\";\r\n\r\nexport function assetPlugin(): Plugin {\r\n  let serverContext: ServerContext;\r\n  return {\r\n    name: \"m-vite:asset\",\r\n    configureServer(s) {\r\n      serverContext = s;\r\n    },\r\n    async load(id) {\r\n      const cleanedId = removeImportQuery(cleanUrl(id));\r\n      const resolvedId = `/${getShortName(normalizePath(id), serverContext.root)}`;\r\n\r\n      //仅处理svg\r\n      if (cleanedId.endsWith(\".svg\")) {\r\n        console.log(resolvedId);\r\n        return {\r\n          code: `export default \"${resolvedId}\"`,\r\n        };\r\n      }\r\n    },\r\n  };\r\n}\r\n","import { Plugin } from \"../plugin\";\nimport { esbuildTransformPlugin } from \"./esbuild\";\nimport { resolvePlugin } from \"./resolve\";\nimport { importAnalysisPlugin } from \"./importAnalysis\";\nimport { cssPlugin } from \"./css\";\nimport { assetPlugin } from \"./assets\";\n\nexport function resolvePlugins(): Plugin[] {\n  return [\n    resolvePlugin(),\n    esbuildTransformPlugin(),\n    importAnalysisPlugin(),\n    cssPlugin(),\n    assetPlugin(),\n  ];\n}\n","import { Plugin } from './plugin';\n//插件容器\n\nimport type {\n  LoadResult,\n  PartialResolvedId,\n  SourceDescription,\n  PluginContext as RollupPluginContext,\n  ResolvedId\n} from 'rollup';\n\n//防止没有实现rollupPlugin全部方法会报错\ntype myRollupPluginContext = Pick<RollupPluginContext, 'resolve'>;\n\n//新增的类型定义\nexport interface PluginContainer {\n  resolveId(id: string, importer?: string): Promise<PartialResolvedId | null>;\n  load(id: string): Promise<LoadResult | null>;\n  transform(code: string, id: string): Promise<LoadResult | null>;\n}\n\n// 模拟rollup的插件机制\nexport const createPluginContainer = (plugins: Plugin[]): PluginContainer => {\n  //插件上下文对象，这里只实现resolve方法，例如在resolveId钩子中被用到过\n  class Context implements myRollupPluginContext {\n    // resolve会执行所有插件（除当前插件外）的resolveId钩子\n    async resolve(id: string, importer?: string) {\n      let out = await pluginContainer.resolveId(id, importer);\n      if (typeof out === 'string') out = { id: out };\n      return out as ResolvedId | null;\n    }\n  }\n\n  //插件容器\n  const pluginContainer: PluginContainer = {\n    async resolveId(id: string, importer?: string) {\n      const ctx = new Context() as any;\n      //遍历插件\n      for (const plugin of plugins) {\n        if (plugin.resolveId) {\n          const newId = await plugin.resolveId.call(ctx as any, id, importer);\n          if (newId) {\n            id = typeof newId === 'string' ? newId : newId.id;\n            return { id };\n          }\n        }\n      }\n      return null;\n    },\n    async load(id) {\n      const ctx = new Context() as any;\n      for (const plugin of plugins) {\n        if (plugin.load) {\n          const result = await plugin.load.call(ctx, id);\n          if (result) {\n            return result;\n          }\n        }\n      }\n      return null;\n    },\n    async transform(code, id) {\n      const ctx = new Context() as any;\n      for (const plugin of plugins) {\n        const result = await plugin.transform?.call(ctx, code, id);\n        if (!result) continue;\n        if (typeof result === 'string') {\n          code = result;\n        } else if (result.code) {\n          code = result.code;\n        }\n      }\n      return { code };\n    }\n  };\n  return pluginContainer;\n};\n","//入口Html编译和加载的能力\n// 通过一个服务中间件来实现\n\nimport { NextHandleFunction } from 'connect';\nimport { ServerContext } from '../index';\nimport path from 'path';\nimport { pathExists, readFile } from 'fs-extra';\n\nexport function indexHtmlMiddleware(\n  serverContext: ServerContext\n): NextHandleFunction {\n  return async (req, res, next) => {\n    if (req.url === '/') {\n      const { root } = serverContext;\n      //默认使用根目录下的index.html\n      const indexHtmlPath = path.join(root, 'index.html');\n      if (await pathExists(indexHtmlPath)) {\n        const rawHtml = await readFile(indexHtmlPath, 'utf-8');\n        let html = rawHtml;\n        // 一次小尝试，将vite App替换为xpppp\n        html = html.replace('Vite App', 'xpppp');\n        // console.log('-------html',html);\n\n        //通过执行插件的transformindexhtml方法来进行自定义修改\n        for (const plugin of serverContext.plugins) {\n          if (plugin.transformIndexHtml) {\n            html = await plugin.transformIndexHtml(html);\n          }\n        }\n        res.statusCode = 200;\n        res.setHeader('Content-type', 'text/html');\n        return res.end(html);\n      }\n      return next();\n    }\n  };\n}\n","import { NextHandleFunction } from \"connect\";\nimport { isJsRequest, cleanUrl, isImportRequest } from \"../../utils\";\nimport { ServerContext } from \"../index\";\nimport createDebug from \"debug\";\nimport { isCssRequest } from \"../../utils\";\n\nconst debug = createDebug(\"dev\");\n\nexport async function transformRequest(url: string, serverContext: ServerContext) {\n  const { moduleGraph,pluginContainer } = serverContext;\n  url = cleanUrl(url);\n  let mod=await moduleGraph.getModuleByUrl(url)\n  if(mod&& mod.transformResult){\n    return mod.transformResult\n  }\n  //依次调用插件容器的resolveId,load,transform方法\n  const resolvedResult = await pluginContainer.resolveId(url);\n  let transformResult;\n  if (resolvedResult?.id) {\n    let code = await pluginContainer.load(resolvedResult.id);\n    if (typeof code === \"object\" && code !== null) {\n      code = code.code;\n    }\n    const {moduleGraph}=serverContext\n    mod=await moduleGraph.ensureEntryFromUrl(url)\n    if (code) {\n      transformResult = await pluginContainer.transform(code as string, resolvedResult?.id);\n    }\n  }\n  if(mod){\n    mod.transformResult=transformResult\n  }\n  return transformResult;\n}\n\nexport function transformMiddleware(serverContext: ServerContext): NextHandleFunction {\n  return async (req, res, next) => {\n    if (req.method !== \"GET\" || !req.url) {\n      return next();\n    }\n    const url = req.url;\n    debug(\"transformMiddleware: %s\", url);\n    //transform JS request\n    if (isJsRequest(url) || isCssRequest(url) || isImportRequest(url)) {\n      //核心编译\n      let result = await transformRequest(url, serverContext);\n      if (!result) {\n        return next();\n      }\n      if (result && typeof result !== \"string\") {\n        result = result.code;\n      }\n      //编译完成，返回给浏览器\n      res.statusCode = 200;\n      res.setHeader(\"Content-type\", \"application/javascript\");\n      return res.end(result);\n    }\n    next();\n  };\n}\n","//处理非import的静态资源请求\r\n//如img标签内的src请求\r\nimport { NextHandleFunction } from \"connect\";\r\nimport { isImportRequest } from \"../../utils\";\r\n\r\n//一个用于加载静态资源的中间件\r\nimport sirv from \"sirv\";\r\n\r\nexport function staticMiddleware(root: string): NextHandleFunction {\r\n  root = root.slice(0, 2) + \"/\" + root.slice(2);\r\n  console.log(\"root\", root);\r\n  root = root.slice(4);\r\n  const serveFromRoot = sirv(root, { dev: true });\r\n\r\n  return async (req, res, next) => {\r\n    console.log(\"req.url\", req.url);\r\n\r\n    if (!req.url) {\r\n      return;\r\n    }\r\n    //不处理import请求\r\n    if (isImportRequest(req.url)) {\r\n      return;\r\n    }\r\n    serveFromRoot(req, res, next);\r\n  };\r\n}\r\n","//实现模块依赖图\r\n//为了方便管理各个模块之间的依赖关系？\r\nimport { PartialResolvedId, TransformResult } from \"rollup\";\r\n\r\nimport { cleanUrl } from \"./utils\";\r\n\r\nexport class ModuleNode {\r\n  //资源访问url\r\n  url: string;\r\n  //资源绝对路径\r\n  id: string | null = null;\r\n  importers = new Set<ModuleNode>();\r\n  importedModules = new Set<ModuleNode>();\r\n  transformResult: TransformResult | null = null;\r\n  lastHMRTimestamp = 0;\r\n  constructor(url: string) {\r\n    this.url = url;\r\n  }\r\n}\r\n\r\nexport class ModuleGraph {\r\n  //资源url到ModuleNode的映射表\r\n  urlToModuleMap = new Map<string, ModuleNode>();\r\n  //资源绝对路径到ModuleNode的映射表\r\n  idToModuleMap = new Map<string, ModuleNode>();\r\n\r\n  constructor(private resolveId: (url: string) => Promise<PartialResolvedId | null>) {}\r\n\r\n  getModuleById(id:string):ModuleNode|undefined{\r\n    return this.idToModuleMap.get(id)\r\n  }\r\n\r\n  async getModuleByUrl(rawUrl:string):Promise<ModuleNode|undefined>{\r\n    const {url}=await this._resolve(rawUrl);\r\n    return this.urlToModuleMap.get(url)\r\n  }\r\n\r\n  async ensureEntryFromUrl(rawUrl:string):Promise<ModuleNode>{\r\n    const {url,resolvedId} =await this._resolve(rawUrl)\r\n    //首先检查缓存\r\n    if(this.urlToModuleMap.has(url)){\r\n      return this.urlToModuleMap.get(url) as ModuleNode\r\n    }\r\n    //若无缓存，更新 urlModuleMap 和 idToModuleMap\r\n    const mod=new ModuleNode(url)\r\n    module.id=resolvedId\r\n    this.urlToModuleMap.set(url,mod);\r\n    this.idToModuleMap.set(resolvedId,mod)\r\n    return mod\r\n  }\r\n\r\n  async updateModuleInfo(\r\n    mod:ModuleNode,\r\n    importedModules:Set<string | ModuleNode>\r\n  ){\r\n    const prevImports=mod.importedModules;\r\n    for(const curImports of importedModules){\r\n      const dep=typeof curImports==='string'?await this.ensureEntryFromUrl(cleanUrl(curImports)):curImports;\r\n      if(dep){\r\n        mod.importedModules.add(dep)\r\n        dep.importers.add(mod)\r\n      }\r\n    }\r\n    //清除已经不被引用的依赖\r\n    for(const prevImport of prevImports){\r\n      if(!importedModules.has(prevImport.url)){\r\n        prevImport.importers.delete(mod)\r\n      }\r\n    }\r\n  }\r\n\r\n  //HMR触发时会执行这个方法\r\n  invalidateModule(file:string){\r\n    const mod=this.idToModuleMap.get(file)\r\n    if(mod){\r\n      //更新时间戳\r\n      mod.lastHMRTimestamp=Date.now()\r\n      mod.transformResult=null\r\n      mod.importers.forEach((importer)=>{\r\n        this.invalidateModule(importer.id!)\r\n      })\r\n    }\r\n  }\r\n\r\n  private async _resolve(url:string):Promise<{url:string;resolvedId:string}>{\r\n    const resolved=await this.resolveId(url);\r\n    const resolvedId=resolved?.id ||url;\r\n    return {url,resolvedId}\r\n  }\r\n}\r\n","//初始化websocket服务端\r\nimport connect from \"connect\";\r\n\r\nimport { red } from \"picocolors\";\r\nimport { WebSocketServer, WebSocket } from \"ws\";\r\nimport { HMR_PORT } from \"./constants\";\r\n\r\nexport function createWebSocketServer(server: connect.Server): {\r\n  send: (msg: string) => void;\r\n  close: () => void;\r\n} {\r\n  let wss: WebSocketServer;\r\n  wss = new WebSocketServer({ port: HMR_PORT });\r\n  wss.on(\"connection\", (socket) => {\r\n    socket.send(JSON.stringify({ type: \"connected\" }));\r\n  });\r\n\r\n  wss.on(\"error\", (e: Error & { code: string }) => {\r\n    if (e.code !== \"EADDRINUSE\") {\r\n      console.error(red(`WebSocket server error:\\n${e.stack || e.message}`));\r\n    }\r\n  });\r\n\r\n  return {\r\n    send(payload: Object) {\r\n      const stringified = JSON.stringify(payload);\r\n      wss.clients.forEach((client) => {\r\n        if (client.readyState === WebSocket.OPEN) {\r\n          client.send(stringified);\r\n        }\r\n      });\r\n    },\r\n    close() {\r\n      wss.close();\r\n    },\r\n  };\r\n}\r\n"],"mappings":"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","names":["import_picocolors","import_path","path","build","import_path","import_path","os","path","createDebug","build","resolve","fs","path","path","import_fs_extra","import_esbuild","import_path","path","esbuild","import_resolve","import_path","import_fs_extra","path","resolve","import_es_module_lexer","import_path","MagicString","path","import_fs_extra","import_path","import_fs_extra","path","import_debug","debug","createDebug","moduleGraph","sirv","import_picocolors","connect","chokidar","cac"]}